// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum NotificationType {
  TASK_CREATED
  TASK_UPDATED
  TASK_STATUS_CHANGED
  TASK_RESULT_UPDATED
  TASK_ASSIGNED
}

enum NotificationStatus {
  UNREAD
  READ
}

enum MessageType {
  TEXT
  SYSTEM
  NOTIFICATION
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

enum TimeRecordStatus {
  CLOCKED_IN
  CLOCKED_OUT
  BREAK_START
  BREAK_END
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
}

model User {
  id            String     @id @default(cuid())
  firstName     String     @map("first_name")
  lastName      String     @map("last_name")
  email         String     @unique
  phone         String?
  password      String
  avatar        String?    @db.Text
  bankAccount   String?    @map("bank_account")
  about         String?    @db.Text
  address       String?    @db.Text
  dateOfBirth   DateTime?  @map("date_of_birth")
  role          UserRole   @default(USER)
  status        UserStatus @default(ACTIVE)
  isActive      Boolean    @default(true) @map("is_active")
  lastLoginAt   DateTime?  @map("last_login_at")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  createdBy     String?    @map("created_by")
  updatedBy     String?    @map("updated_by")

  // Task relationships
  assignedTasks Task[]     @relation("TaskAssignee")
  createdTasks  Task[]     @relation("TaskCreator")

  // Notification relationships
  notifications Notification[] @relation("UserNotifications")

  // Message relationships
  sentMessages     Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageRecipient")
  conversations    ConversationParticipant[]

  // Time tracking relationships
  timeRecords TimeRecord[] @relation("UserTimeRecords")
  attendance  Attendance[]  @relation("UserAttendance")

  @@map("users")
}

model TaskType {
  id        String   @id @default(cuid())
  name      String   @unique
  price     Decimal  @db.Decimal(10, 2)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy String?  @map("created_by")
  updatedBy String?  @map("updated_by")

  // Task relationships
  tasks Task[]

  @@map("task_types")
}

model Task {
  id          String     @id @default(cuid())
  name        String
  description String?    @db.Text
  startDate   DateTime   @map("start_date")
  endDate     DateTime   @map("end_date")
  resource    String?    @db.Text
  result      String?    @db.Text
  status      TaskStatus @default(PENDING)
  isActive    Boolean    @default(true) @map("is_active")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  
  // Relationships
  taskTypeId  String     @map("task_type_id")
  taskType    TaskType   @relation(fields: [taskTypeId], references: [id])
  
  assigneeId  String     @map("assignee_id")
  assignee    User       @relation("TaskAssignee", fields: [assigneeId], references: [id])
  
  createdById String     @map("created_by_id")
  createdBy   User       @relation("TaskCreator", fields: [createdById], references: [id])
  
  updatedBy   String?    @map("updated_by")

  // Notification relationships
  notifications Notification[]

  @@map("tasks")
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String           @db.Text
  status    NotificationStatus @default(UNREAD)
  data      String?         @db.Text // JSON data for additional info
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")

  // Relationships
  userId    String
  user      User             @relation("UserNotifications", fields: [userId], references: [id])

  taskId    String?
  task      Task?            @relation(fields: [taskId], references: [id])

  @@map("notifications")
}

model Conversation {
  id          String   @id @default(cuid())
  name        String?  // For group conversations
  type        String   @default("DIRECT") // DIRECT, GROUP
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relationships
  participants ConversationParticipant[]
  messages     Message[]

  @@map("conversations")
}

model ConversationParticipant {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  conversationId String   @map("conversation_id")
  joinedAt       DateTime @default(now()) @map("joined_at")
  leftAt         DateTime? @map("left_at")
  isActive       Boolean  @default(true) @map("is_active")

  // Relationships
  user         User          @relation(fields: [userId], references: [id])
  conversation Conversation   @relation(fields: [conversationId], references: [id])

  @@unique([userId, conversationId])
  @@map("conversation_participants")
}

model Message {
  id             String        @id @default(cuid())
  content        String        @db.Text
  type           MessageType   @default(TEXT)
  status         MessageStatus @default(SENT)
  senderId       String        @map("sender_id")
  recipientId    String?       @map("recipient_id")
  conversationId String?       @map("conversation_id")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")

  // Relationships
  sender      User          @relation("MessageSender", fields: [senderId], references: [id])
  recipient   User?         @relation("MessageRecipient", fields: [recipientId], references: [id])
  conversation Conversation? @relation(fields: [conversationId], references: [id])

  @@map("messages")
}

model TimeRecord {
  id          String           @id @default(cuid())
  userId      String           @map("user_id")
  status      TimeRecordStatus
  clockInAt   DateTime?        @map("clock_in_at")
  clockOutAt  DateTime?        @map("clock_out_at")
  breakStartAt DateTime?       @map("break_start_at")
  breakEndAt   DateTime?       @map("break_end_at")
  totalHours  Decimal?         @map("total_hours") @db.Decimal(5, 2) // Hours worked (e.g., 8.50)
  breakHours  Decimal?         @map("break_hours") @db.Decimal(5, 2) // Break hours (e.g., 1.00)
  workHours   Decimal?         @map("work_hours") @db.Decimal(5, 2)  // Actual work hours (total - break)
  notes       String?          @db.Text
  location    String?          // Optional location tracking
  isActive    Boolean          @default(true) @map("is_active")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")

  // Relationships
  user User @relation("UserTimeRecords", fields: [userId], references: [id])

  @@map("time_records")
}

model Attendance {
  id        String           @id @default(cuid())
  userId    String           @map("user_id")
  date      DateTime         @db.Date // Date of attendance (without time)
  status    AttendanceStatus @default(PRESENT)
  notes     String?          @db.Text
  isActive  Boolean          @default(true) @map("is_active")
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")

  // Relationships
  user User @relation("UserAttendance", fields: [userId], references: [id])

  // Ensure one attendance record per user per date
  @@unique([userId, date])
  @@map("attendance")
}
